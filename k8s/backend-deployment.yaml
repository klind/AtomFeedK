# Backend Kubernetes Deployment Configuration
# -----------------------------------------
# This configuration deploys and manages the backend service for the HCM Developer Utility
# in a Kubernetes cluster. It sets up:
#
# 1. Deployment:
#    - Runs the backend application container from ECR
#    - Maintains 2 replicas for high availability
#    - Sets resource limits and requests for efficient resource usage
#    - Configures environment variables
#    - Uses ECR image: 084828595145.dkr.ecr.eu-north-1.amazonaws.com/hcm-developer-util-backend
#
# 2. HorizontalPodAutoscaler (HPA):
#    - Automatically scales pods based on resource utilization
#    - Maintains between 2 and 10 replicas
#    - Scales up when:
#      * CPU utilization exceeds 70%
#      * Memory utilization exceeds 80%
#
# Environment Configuration:
#    - Deployed in private subnet for enhanced security
#    - Exposed via an internal LoadBalancer created by backend-service.yaml
#    - Accessible to the frontend via Kubernetes DNS
#
# Usage:
# 1. Deploy to Kubernetes cluster:
#    kubectl apply -f backend-deployment.yaml
#
# 2. Monitor deployment:
#    kubectl get deployment hcm-developer-util-backend
#    kubectl get hpa hcm-developer-util-backend-hpa
# -----------------------------------------

apiVersion: apps/v1
kind: Deployment
metadata:
  name: hcm-developer-util-backend
  namespace: default
spec:
  replicas: 2
  selector:
    matchLabels:
      app: hcm-developer-util-backend
  template:
    metadata:
      labels:
        app: hcm-developer-util-backend
    spec:
      serviceAccountName: hcm-developer-util-backend-service-account
      containers:
      - name: backend
        image: 084828595145.dkr.ecr.eu-north-1.amazonaws.com/hcm-developer-util-backend:latest
        ports:
        - containerPort: 5000
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
          limits:
            cpu: "200m"
            memory: "256Mi"
        env:
        - name: NODE_ENV
          value: "dev"
        # Add any other environment variables your backend needs
        readinessProbe:
          httpGet:
            path: /api-docs
            port: 5000
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /api-docs
            port: 5000
          initialDelaySeconds: 15
          periodSeconds: 20
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: hcm-developer-util-backend-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: hcm-developer-util-backend
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
---
apiVersion: v1
kind: Service
metadata:
  name: hcm-developer-util-backend
  namespace: default
  labels:
    app: hcm-developer-util-backend
spec:
  type: ClusterIP
  ports:
  - port: 80             # The port the service listens on
    targetPort: 5000     # The port your backend container exposes
    protocol: TCP
  selector:
    app: hcm-developer-util-backend  # This should match your backend pod labels
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: hcm-developer-util-backend-ingress
  annotations:
    alb.ingress.kubernetes.io/scheme: internal
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}]'
    alb.ingress.kubernetes.io/backend-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: "5000"
    alb.ingress.kubernetes.io/healthcheck-path: "/api-docs"
spec:
  ingressClassName: alb
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: hcm-developer-util-backend
            port:
              number: 80 